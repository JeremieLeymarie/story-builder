// This file is auto-generated by @hey-api/openapi-ts

export const $APIResponse = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        message: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Message'
        }
    },
    type: 'object',
    required: ['success'],
    title: 'APIResponse'
} as const;

export const $Action = {
    properties: {
        text: {
            type: 'string',
            title: 'Text'
        },
        sceneKey: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Scenekey'
        }
    },
    type: 'object',
    required: ['text'],
    title: 'Action'
} as const;

export const $BuilderParams = {
    properties: {
        position: {
            '$ref': '#/components/schemas/BuilderPosition'
        }
    },
    type: 'object',
    required: ['position'],
    title: 'BuilderParams'
} as const;

export const $BuilderPosition = {
    properties: {
        x: {
            type: 'number',
            title: 'X'
        },
        y: {
            type: 'number',
            title: 'Y'
        }
    },
    type: 'object',
    required: ['x', 'y'],
    title: 'BuilderPosition'
} as const;

export const $CreateUserRequest = {
    properties: {
        username: {
            type: 'string',
            title: 'Username'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        key: {
            type: 'string',
            title: 'Key'
        }
    },
    type: 'object',
    required: ['username', 'email', 'password', 'key'],
    title: 'CreateUserRequest'
} as const;

export const $FullStory = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        authorKey: {
            type: 'string',
            title: 'Authorkey'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        image: {
            type: 'string',
            title: 'Image'
        },
        status: {
            '$ref': '#/components/schemas/StoryStatus'
        },
        scenes: {
            items: {
                '$ref': '#/components/schemas/Scene-Output'
            },
            type: 'array',
            title: 'Scenes'
        }
    },
    type: 'object',
    required: ['key', 'authorKey', 'title', 'description', 'image', 'status', 'scenes'],
    title: 'FullStory'
} as const;

export const $FullStoryBuilderRequest = {
    properties: {
        story: {
            '$ref': '#/components/schemas/Story'
        },
        scenes: {
            items: {
                '$ref': '#/components/schemas/Scene-Input'
            },
            type: 'array',
            title: 'Scenes'
        }
    },
    type: 'object',
    required: ['story', 'scenes'],
    title: 'FullStoryBuilderRequest'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $LoginUserRequest = {
    properties: {
        usernameOrEmail: {
            type: 'string',
            title: 'Usernameoremail'
        },
        password: {
            type: 'string',
            title: 'Password'
        }
    },
    type: 'object',
    required: ['usernameOrEmail', 'password'],
    title: 'LoginUserRequest'
} as const;

export const $Scene_Input = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        storyKey: {
            type: 'string',
            title: 'Storykey'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        content: {
            type: 'string',
            title: 'Content'
        },
        actions: {
            items: {
                '$ref': '#/components/schemas/Action'
            },
            type: 'array',
            title: 'Actions'
        },
        builderParams: {
            '$ref': '#/components/schemas/BuilderParams'
        }
    },
    type: 'object',
    required: ['key', 'storyKey', 'title', 'content', 'actions', 'builderParams'],
    title: 'Scene'
} as const;

export const $Scene_Output = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        storyKey: {
            type: 'string',
            title: 'Storykey'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        content: {
            type: 'string',
            title: 'Content'
        },
        actions: {
            items: {
                '$ref': '#/components/schemas/Action'
            },
            type: 'array',
            title: 'Actions'
        },
        builderParams: {
            '$ref': '#/components/schemas/BuilderParams'
        }
    },
    type: 'object',
    required: ['key', 'storyKey', 'title', 'content', 'actions', 'builderParams'],
    title: 'Scene'
} as const;

export const $Story = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        authorKey: {
            type: 'string',
            title: 'Authorkey'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        image: {
            type: 'string',
            title: 'Image'
        },
        status: {
            '$ref': '#/components/schemas/StoryStatus'
        }
    },
    type: 'object',
    required: ['key', 'authorKey', 'title', 'description', 'image', 'status'],
    title: 'Story'
} as const;

export const $StoryProgress = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        history: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'History'
        },
        currentSceneKey: {
            type: 'string',
            title: 'Currentscenekey'
        },
        lastPlayedAt: {
            type: 'string',
            format: 'date-time',
            title: 'Lastplayedat'
        }
    },
    type: 'object',
    required: ['key', 'history', 'currentSceneKey', 'lastPlayedAt'],
    title: 'StoryProgress'
} as const;

export const $StoryStatus = {
    type: 'string',
    enum: ['draft', 'saved', 'published'],
    title: 'StoryStatus'
} as const;

export const $SynchronizationPayload = {
    properties: {
        playerGames: {
            items: {
                '$ref': '#/components/schemas/FullStory'
            },
            type: 'array',
            title: 'Playergames'
        },
        builderGames: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/FullStory'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Buildergames'
        }
    },
    type: 'object',
    required: ['playerGames'],
    title: 'SynchronizationPayload'
} as const;

export const $User = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        username: {
            type: 'string',
            title: 'Username'
        }
    },
    type: 'object',
    required: ['key', 'email', 'username'],
    title: 'User'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;
