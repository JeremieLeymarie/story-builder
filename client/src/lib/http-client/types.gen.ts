// This file is auto-generated by @hey-api/openapi-ts

export type APIResponse = {
    success: boolean;
    message?: string | null;
};

export type Action = {
    text: string;
    sceneKey?: string | null;
};

export type BuilderParams = {
    position: BuilderPosition;
};

export type BuilderPosition = {
    x: number;
    y: number;
};

export type CreateUserRequest = {
    username: string;
    email: string;
    password: string;
    key: string;
};

export type FullStory = {
    key: string;
    authorKey: string;
    title: string;
    description: string;
    image: string;
    status: StoryStatus;
    scenes: Array<Scene_Output>;
};

export type FullStoryBuilderRequest = {
    story: Story;
    scenes: Array<Scene_Input>;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type LoginUserRequest = {
    usernameOrEmail: string;
    password: string;
};

export type Scene_Input = {
    key: string;
    storyKey: string;
    title: string;
    content: string;
    actions: Array<Action>;
    builderParams: BuilderParams;
};

export type Scene_Output = {
    key: string;
    storyKey: string;
    title: string;
    content: string;
    actions: Array<Action>;
    builderParams: BuilderParams;
};

export type Story = {
    key: string;
    authorKey: string;
    title: string;
    description: string;
    image: string;
    status: StoryStatus;
};

export type StoryProgress = {
    key: string;
    history: Array<(string)>;
    currentSceneKey: string;
    lastPlayedAt: string;
};

export type StoryStatus = 'draft' | 'saved' | 'published';

export type SynchronizationPayload = {
    playerGames: Array<FullStory>;
    builderGames?: Array<FullStory> | null;
};

export type User = {
    key: string;
    email: string;
    username: string;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ApiUserLoginData = {
    body: LoginUserRequest;
};

export type ApiUserLoginResponse = User;

export type ApiUserLoginError = HTTPValidationError;

export type ApiCreateUserData = {
    body: CreateUserRequest;
};

export type ApiCreateUserResponse = User;

export type ApiCreateUserError = HTTPValidationError;

export type ApiSaveBuilderStateData = {
    body: FullStoryBuilderRequest;
};

export type ApiSaveBuilderStateResponse = APIResponse;

export type ApiSaveBuilderStateError = HTTPValidationError;

export type ApiGetStoreItemsResponse = Array<Story>;

export type ApiGetStoreItemsError = unknown;

export type ApiDownloadFromStoreData = {
    path: {
        key: string;
    };
};

export type ApiDownloadFromStoreResponse = FullStory;

export type ApiDownloadFromStoreError = HTTPValidationError;

export type ApiPublishInStoreData = {
    body: FullStoryBuilderRequest;
};

export type ApiPublishInStoreResponse = APIResponse;

export type ApiPublishInStoreError = HTTPValidationError;

export type ApiGetSynchronizationDataData = {
    path: {
        user_key: string;
    };
};

export type ApiGetSynchronizationDataResponse = SynchronizationPayload;

export type ApiGetSynchronizationDataError = HTTPValidationError;

export type ApiSynchronizeProgressData = {
    body: StoryProgress;
};

export type ApiSynchronizeProgressResponse = APIResponse;

export type ApiSynchronizeProgressError = HTTPValidationError;

export type $OpenApiTs = {
    '/api/user/login': {
        post: {
            req: ApiUserLoginData;
            res: {
                /**
                 * Successful Response
                 */
                '200': User;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/user/register': {
        post: {
            req: ApiCreateUserData;
            res: {
                /**
                 * Successful Response
                 */
                '201': User;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/builder/save/game': {
        post: {
            req: ApiSaveBuilderStateData;
            res: {
                /**
                 * Successful Response
                 */
                '200': APIResponse;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/store/load': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                '200': Array<Story>;
            };
        };
    };
    '/api/store/download/{key}': {
        get: {
            req: ApiDownloadFromStoreData;
            res: {
                /**
                 * Successful Response
                 */
                '200': FullStory;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/store/publish': {
        put: {
            req: ApiPublishInStoreData;
            res: {
                /**
                 * Successful Response
                 */
                '200': APIResponse;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/synchronize/{user_key}': {
        get: {
            req: ApiGetSynchronizationDataData;
            res: {
                /**
                 * Successful Response
                 */
                '200': SynchronizationPayload;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
    '/api/synchronize/progress': {
        patch: {
            req: ApiSynchronizeProgressData;
            res: {
                /**
                 * Successful Response
                 */
                '200': APIResponse;
                /**
                 * Validation Error
                 */
                '422': HTTPValidationError;
            };
        };
    };
};
