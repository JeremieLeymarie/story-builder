// This file is auto-generated by @hey-api/openapi-ts

import { client, type Options } from '@hey-api/client-fetch';
import type { ApiUserLoginData, ApiUserLoginError, ApiUserLoginResponse, ApiCreateUserData, ApiCreateUserError, ApiCreateUserResponse, ApiSaveBuilderStateData, ApiSaveBuilderStateError, ApiSaveBuilderStateResponse, ApiGetStoreItemsError, ApiGetStoreItemsResponse, ApiDownloadFromStoreData, ApiDownloadFromStoreError, ApiDownloadFromStoreResponse, ApiPublishInStoreData, ApiPublishInStoreError, ApiPublishInStoreResponse, ApiGetSynchronizationDataData, ApiGetSynchronizationDataError, ApiGetSynchronizationDataResponse, ApiSynchronizeProgressData, ApiSynchronizeProgressError, ApiSynchronizeProgressResponse } from './types.gen';

/**
 * User Login
 */
export const apiUserLogin = (options: Options<ApiUserLoginData>) => { return (options?.client ?? client).post<ApiUserLoginResponse, ApiUserLoginError>({
    ...options,
    url: '/api/user/login'
}); };

/**
 * Create User
 */
export const apiCreateUser = (options: Options<ApiCreateUserData>) => { return (options?.client ?? client).post<ApiCreateUserResponse, ApiCreateUserError>({
    ...options,
    url: '/api/user/register'
}); };

/**
 * Save Builder State
 */
export const apiSaveBuilderState = (options: Options<ApiSaveBuilderStateData>) => { return (options?.client ?? client).post<ApiSaveBuilderStateResponse, ApiSaveBuilderStateError>({
    ...options,
    url: '/api/builder/save/game'
}); };

/**
 * Get Store Items
 */
export const apiGetStoreItems = (options?: Options) => { return (options?.client ?? client).get<ApiGetStoreItemsResponse, ApiGetStoreItemsError>({
    ...options,
    url: '/api/store/load'
}); };

/**
 * Download From Store
 */
export const apiDownloadFromStore = (options: Options<ApiDownloadFromStoreData>) => { return (options?.client ?? client).get<ApiDownloadFromStoreResponse, ApiDownloadFromStoreError>({
    ...options,
    url: '/api/store/download/{key}'
}); };

/**
 * Publish In Store
 */
export const apiPublishInStore = (options: Options<ApiPublishInStoreData>) => { return (options?.client ?? client).put<ApiPublishInStoreResponse, ApiPublishInStoreError>({
    ...options,
    url: '/api/store/publish'
}); };

/**
 * Get Synchronization Data
 */
export const apiGetSynchronizationData = (options: Options<ApiGetSynchronizationDataData>) => { return (options?.client ?? client).get<ApiGetSynchronizationDataResponse, ApiGetSynchronizationDataError>({
    ...options,
    url: '/api/synchronize/{user_key}'
}); };

/**
 * Synchronize Progress
 */
export const apiSynchronizeProgress = (options: Options<ApiSynchronizeProgressData>) => { return (options?.client ?? client).patch<ApiSynchronizeProgressResponse, ApiSynchronizeProgressError>({
    ...options,
    url: '/api/synchronize/progress'
}); };
